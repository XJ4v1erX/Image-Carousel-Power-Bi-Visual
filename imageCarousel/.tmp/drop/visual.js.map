{"version":3,"file":"visual.js","mappings":"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CrB;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,+EAAU;AAC3D;AACA,iCAAiC,gBAAgB;AACjD,sCAAsC,gBAAgB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,wGAAwG;AAC7J;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,oGAAoG;AACrJ;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA,4BAA4B,kDAAkD;AAC9E;AACA,yEAAyE,gBAAgB;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,oBAAoB,GAAG,uBAAuB;AAC3F;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,kFAAa;AACzC;AACA,oDAAoD,+EAAU;AAC9D,6BAA6B,gBAAgB;AAC7C,kCAAkC,gBAAgB;AAClD;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iEAAe,yBAAyB,EAAC;AACzC;;;;;;;;;;;;;AChMqE;AACD;AACX;AACzD;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AAC4E;AAC5E;AACA;AACO;AACP;AACO;AACP;AACA;AACO;AACP;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,2BAA2B;AACxE;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,wBAAwB,kFAAsC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,qBAAqB,qFAAyC;AAC9D;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,gEAAgE;AAC5J;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,oFAAoF;AAChL;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,uBAAuB;AACnH;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,qKAAqK;AACjQ;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,mBAAmB;AAC/G;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,gEAAgE;AAC5J;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,6BAA6B;AACzH;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,6BAA6B;AACzH;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,4EAA4E;AACxK;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,mBAAmB;AAC/G;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,+BAA+B;AAC3H;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,yDAAyD;AACrJ;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,2BAA2B;AACxE;AACA;AACA,eAAe;AACf;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO,4BAA4B,2DAAW;AAC9C;AACA;;;;;;;;;;;ACpT2E;AAC3E,IAAO,sBAAsB,GAAG,4GAA6B,CAAC;AAC9D,IAAO,uBAAuB,GAAG,uGAAwB,CAAC;AAG1D,MAAM,gBAAiB,SAAQ,sBAAsB;IACjD,SAAS,GAAG,IAAI,8GAA+B,CAAC;QAC5C,IAAI,EAAE,WAAW;QACjB,WAAW,EAAE,0BAA0B;QACvC,KAAK,EAAE,IAAI;KACd,CAAC,CAAC;IAEH,WAAW,GAAG,IAAI,8GAA+B,CAAC;QAC9C,IAAI,EAAE,aAAa;QACnB,WAAW,EAAE,wBAAwB;QACrC,KAAK,EAAE,IAAI;KACd,CAAC,CAAC;IAEH,SAAS,GAAG,IAAI,8GAA+B,CAAC;QAC5C,IAAI,EAAE,WAAW;QACjB,WAAW,EAAE,2BAA2B;QACxC,KAAK,EAAE,KAAK;KACf,CAAC,CAAC;IAEH,UAAU,GAAG,IAAI,2GAA4B,CAAC;QAC1C,IAAI,EAAE,YAAY;QAClB,WAAW,EAAE,+BAA+B;QAC5C,KAAK,EAAE,CAAC;KACX,CAAC,CAAC;IAEH,QAAQ,GAAG,IAAI,2GAA4B,CAAC;QACxC,IAAI,EAAE,UAAU;QAChB,WAAW,EAAE,0BAA0B;QACvC,KAAK,EAAE,CAAC;QACR,OAAO,EAAE,IAAI;KAChB,CAAC,CAAC;IAEH,YAAY,GAAG,IAAI,2GAA4B,CAAC;QAC5C,IAAI,EAAE,cAAc;QACpB,WAAW,EAAE,6BAA6B;QAC1C,KAAK,EAAE,CAAC;QACR,OAAO,EAAE,KAAK;KACjB,CAAC,CAAC;IAEH,IAAI,GAAW,UAAU,CAAC;IAC1B,WAAW,GAAW,6BAA6B,CAAC;IACpD,MAAM,GAA8B;QAChC,IAAI,CAAC,SAAS;QACd,IAAI,CAAC,WAAW;QAChB,IAAI,CAAC,SAAS;QACd,IAAI,CAAC,QAAQ;QACb,IAAI,CAAC,UAAU;QACf,IAAI,CAAC,YAAY;KACpB,CAAC;CACL;AAEM,MAAM,cAAe,SAAQ,uBAAuB;IACvD,QAAQ,GAAqB,IAAI,gBAAgB,EAAE,CAAC;IACpD,KAAK,GAA6B,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;CACrD;;;;;;;UC3DD;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACN0C;AAK1C,IAAI,UAAU,GAAQ,SAAS,CAAC;AAChC,IAAI,OAAO,GAAQ,MAAM,CAAC,UAAU,CAAC,CAAC;AACtC,IAAI,mDAAmD,GAAkB;IACrE,IAAI,EAAE,qDAAqD;IAC3D,WAAW,EAAE,eAAe;IAC5B,KAAK,EAAE,QAAQ;IACf,UAAU,EAAE,OAAO;IACnB,MAAM,EAAE,CAAC,OAAkC,EAAE,EAAE;QAC3C,IAAI,wDAAM,EAAE,CAAC;YACT,OAAO,IAAI,wDAAM,CAAC,OAAO,CAAC,CAAC;QAC/B,CAAC;QACD,MAAM,2BAA2B,CAAC;IACtC,CAAC;IACD,iBAAiB,EAAE,CAAC,QAAgB,EAAE,OAAiC,EAAE,YAAoB,EAAE,EAAE;QAC7F,MAAM,cAAc,GAAS,UAAW,CAAC,cAAc,CAAC;QACxD,IAAI,QAAQ,IAAI,cAAc,EAAE,CAAC;YAC7B,IAAI,cAAc,CAAC,QAAQ,CAAC,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;QACxD,CAAC;IACL,CAAC;IACD,MAAM,EAAE,IAAI;CACf,CAAC;AACF,IAAI,OAAO,OAAO,KAAK,WAAW,EAAE,CAAC;IACjC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC;IACxC,OAAO,CAAC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC;IACxD,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,qDAAqD,CAAC,GAAG,mDAAmD,CAAC;AACzI,CAAC;AACD,mDAAe,mDAAmD,EAAC","sources":["webpack:///./src/visual.ts","webpack:///./node_modules/powerbi-visuals-utils-formattingmodel/lib/utils/FormattingSettingsUtils.js","webpack:///./node_modules/powerbi-visuals-utils-formattingmodel/lib/FormattingSettingsService.js","webpack:///./node_modules/powerbi-visuals-utils-formattingmodel/lib/index.js","webpack:///./node_modules/powerbi-visuals-utils-formattingmodel/lib/FormattingSettingsComponents.js","webpack:///./src/settings.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./.tmp/precompile/visualPlugin.ts"],"sourcesContent":["// src/visual.ts\nimport powerbi from \"powerbi-visuals-api\";\nimport VisualConstructorOptions = powerbi.extensibility.visual.VisualConstructorOptions;\nimport VisualUpdateOptions = powerbi.extensibility.visual.VisualUpdateOptions;\nimport { VisualSettings } from \"./settings\";\nimport { FormattingSettingsService } from \"powerbi-visuals-utils-formattingmodel\";\nimport \"../style/visual.less\";\n\n\nexport class Visual {\n    private container: HTMLElement;\n    private currentIndex = 0;\n    private carouselInterval: any;\n    private options: VisualUpdateOptions;\n    private formattingSettingsService = new FormattingSettingsService();\n    private visualSettings: VisualSettings;\n\n \n    constructor(options: VisualConstructorOptions) {\n        this.container = document.createElement('div');\n        this.container.id = 'carousel-container';\n        options.element.appendChild(this.container);\n    }\n\n    public update(options: VisualUpdateOptions) {\n        this.options = options;\n        this.visualSettings = this.formattingSettingsService.populateFormattingSettingsModel(\n            VisualSettings,\n            options.dataViews?.[0]\n        );\n        this.visualSettings.behavior.interval.visible = this.visualSettings.behavior.autoSlide.value;\n        this.visualSettings.behavior.spaceBetween.visible = this.visualSettings.behavior.imageCount.value > 1;\n\n        const dataView = options.dataViews[0];\n        if (!dataView?.categorical) return;\n\n        const categorical = dataView.categorical;\n        const imageUrls = categorical.categories[0].values as string[];\n        const sequences = categorical.values?.[0]?.values as number[] || [];\n\n        const carouselImages = imageUrls.map((url, index) => ({\n            url,\n            sequence: sequences[index] || index\n        })).sort((a, b) => a.sequence - b.sequence);\n\n        this.renderCarousel(carouselImages);\n    }\n    public getFormattingModel(): powerbi.visuals.FormattingModel {\n        return this.formattingSettingsService.buildFormattingModel(this.visualSettings);\n    }\n    \n\n    private renderCarousel(images) {\n        this.container.replaceChildren();\n        const settings = this.getBehaviorSettings();\n    \n        // Contenedor del grupo de imágenes\n        const group = document.createElement('div');\n        group.className = 'carousel-group';\n    \n        // Variables CSS dinámicas\n        group.style.setProperty('--image-count', String(settings.imageCount));\n        group.style.setProperty('--space-between', `${settings.spaceBetween}px`);\n\n        function secureRandom() {\n            const array = new Uint32Array(1);\n            window.crypto.getRandomValues(array);\n            return array[0] / (0xFFFFFFFF + 1);\n        }\n    \n        const imagesToRender = settings.randomize\n            ? images.sort(() => 0.5 - secureRandom())\n            : images;\n    \n        imagesToRender.forEach((image, index) => {\n            const wrapper = document.createElement('div');\n            wrapper.className = 'carousel-image-wrapper';\n    \n            const imgElem = document.createElement('img');\n            imgElem.src = image.url;\n            imgElem.className = 'carousel-image';\n    \n            // Zoom interactivo\n            if (settings.hoverToZoom) {\n                imgElem.addEventListener('mouseenter', () => imgElem.classList.add('zoomed'));\n                imgElem.addEventListener('mouseleave', () => {\n                    imgElem.classList.remove('zoomed');\n                    imgElem.style.transformOrigin = 'center center';\n                });\n                imgElem.addEventListener('mousemove', (e) => {\n                    const rect = imgElem.getBoundingClientRect();\n                    const x = ((e.clientX - rect.left) / rect.width) * 100;\n                    const y = ((e.clientY - rect.top) / rect.height) * 100;\n                    imgElem.style.transformOrigin = `${x}% ${y}%`;\n                });\n            }\n    \n            wrapper.appendChild(imgElem);\n            group.appendChild(wrapper);\n        });\n    \n        this.container.appendChild(group);\n        this.updateCarouselView(this.currentIndex);\n        this.setupCarouselBehavior(imagesToRender.length);\n    \n        if (!settings.autoSlide) {\n            const leftBtn = document.createElement('div');\n            const rightBtn = document.createElement('div');\n        \n            leftBtn.className = 'carousel-arrow left-arrow';\n            rightBtn.className = 'carousel-arrow right-arrow';\n        \n            const createArrowSVG = (direction: 'left' | 'right') => {\n                const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n                svg.setAttribute(\"width\", \"14\");\n                svg.setAttribute(\"height\", \"14\");\n                svg.setAttribute(\"viewBox\", \"0 0 24 24\");\n                svg.setAttribute(\"fill\", \"none\");\n        \n                const path = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n                const d = direction === \"left\"\n                    ? \"M15 6L9 12L15 18\"\n                    : \"M9 6L15 12L9 18\";\n        \n                path.setAttribute(\"d\", d);\n                path.setAttribute(\"stroke\", \"white\");\n                path.setAttribute(\"stroke-width\", \"2\");\n                path.setAttribute(\"stroke-linecap\", \"round\");\n                path.setAttribute(\"stroke-linejoin\", \"round\");\n        \n                svg.appendChild(path);\n                return svg;\n            };\n        \n            leftBtn.appendChild(createArrowSVG(\"left\"));\n            rightBtn.appendChild(createArrowSVG(\"right\"));\n        \n            leftBtn.onclick = () => {\n                const total = images.length;\n                this.currentIndex = (this.currentIndex - 1 + total) % total;\n                this.updateCarouselView(this.currentIndex);\n            };\n        \n            rightBtn.onclick = () => {\n                const total = images.length;\n                this.currentIndex = (this.currentIndex + 1) % total;\n                this.updateCarouselView(this.currentIndex);\n            };\n        \n            this.container.appendChild(leftBtn);\n            this.container.appendChild(rightBtn);\n        }\n    }\n    \n\n    private setupCarouselBehavior(totalImages: number) {\n        const settings = this.getBehaviorSettings();\n        if (this.carouselInterval) clearInterval(this.carouselInterval);\n    \n        if (settings.autoSlide) {\n            this.carouselInterval = setInterval(() => {\n                this.currentIndex = (this.currentIndex + 1) % totalImages;\n                this.updateCarouselView(this.currentIndex);\n            }, Number(settings.interval));\n        }\n    }\n\n    private updateCarouselView(index: number) {\n        const settings = this.getBehaviorSettings();\n        const images = this.container.querySelectorAll('.carousel-image-wrapper');\n\n        const total = images.length;\n\n        images.forEach((wrapper, idx) => {\n            const visibleIndexes = [];\n            for (let i = 0; i < Number(settings.imageCount); i++) {\n                visibleIndexes.push((index + i) % total);\n            }\n\n            if (visibleIndexes.includes(idx)) {\n                (wrapper as HTMLElement).style.display = 'block';\n            } else {\n                (wrapper as HTMLElement).style.display = 'none';\n            }\n        });\n    }\n\n    private getBehaviorSettings() {\n        const objects = this.options.dataViews[0].metadata.objects;\n    \n        return {\n            autoSlide: objects?.behavior?.autoSlide ?? true,\n            hoverToZoom: objects?.behavior?.hoverToZoom ?? false,\n            randomize: objects?.behavior?.randomize ?? false,\n            interval: (Number(objects?.behavior?.interval) || 3) * 1000,\n            imageCount: objects?.behavior?.imageCount ?? 1,\n            spaceBetween: objects?.behavior?.spaceBetween ?? 8,\n        };\n    }\n}\n","/**\n * Build and return formatting descriptor for simple slice\n *\n * @param objectName Object name from capabilities\n * @param slice formatting simple slice\n * @returns simple slice formatting descriptor\n */\nexport function getDescriptor(objectName, slice) {\n    return {\n        objectName: objectName,\n        propertyName: slice.name,\n        selector: slice.selector,\n        altConstantValueSelector: slice.altConstantSelector,\n        instanceKind: slice.instanceKind\n    };\n}\n/**\n * Get property value from dataview objects if exists\n * Else return the default value from formatting settings object\n *\n * @param value dataview object value\n * @param defaultValue formatting settings default value\n * @returns formatting property value\n */\nexport function getPropertyValue(slice, value, defaultValue) {\n    if (value == null || (typeof value === \"object\" && !value.solid)) {\n        return defaultValue;\n    }\n    if (value.solid) {\n        return { value: value === null || value === void 0 ? void 0 : value.solid.color };\n    }\n    if ((slice === null || slice === void 0 ? void 0 : slice.type) === \"Dropdown\" /* visuals.FormattingComponent.Dropdown */ && slice.items) {\n        const itemsArray = slice.items;\n        return itemsArray.find(item => item.value == value);\n    }\n    return value;\n}\n//# sourceMappingURL=FormattingSettingsUtils.js.map","import { CompositeCard, SimpleCard } from \"./FormattingSettingsComponents\";\nexport class FormattingSettingsService {\n    constructor(localizationManager) {\n        this.localizationManager = localizationManager;\n    }\n    /**\n     * Build visual formatting settings model from metadata dataView\n     *\n     * @param dataViews metadata dataView object\n     * @returns visual formatting settings model\n     */\n    populateFormattingSettingsModel(typeClass, dataView) {\n        var _a, _b;\n        const defaultSettings = new typeClass();\n        const dataViewObjects = (_a = dataView === null || dataView === void 0 ? void 0 : dataView.metadata) === null || _a === void 0 ? void 0 : _a.objects;\n        if (dataViewObjects) {\n            // loop over each formatting property and set its new value if exists\n            (_b = defaultSettings.cards) === null || _b === void 0 ? void 0 : _b.forEach((card) => {\n                var _a;\n                if (card instanceof CompositeCard)\n                    (_a = card.topLevelSlice) === null || _a === void 0 ? void 0 : _a.setPropertiesValues(dataViewObjects, card.name);\n                const cardGroupInstances = (card instanceof SimpleCard ? [card] : card.groups);\n                cardGroupInstances.forEach((cardGroupInstance) => {\n                    var _a, _b, _c, _d;\n                    // Set current top level toggle value\n                    (_a = cardGroupInstance.topLevelSlice) === null || _a === void 0 ? void 0 : _a.setPropertiesValues(dataViewObjects, card.name);\n                    (_b = cardGroupInstance === null || cardGroupInstance === void 0 ? void 0 : cardGroupInstance.slices) === null || _b === void 0 ? void 0 : _b.forEach((slice) => {\n                        slice === null || slice === void 0 ? void 0 : slice.setPropertiesValues(dataViewObjects, card.name);\n                    });\n                    (_d = (_c = cardGroupInstance === null || cardGroupInstance === void 0 ? void 0 : cardGroupInstance.container) === null || _c === void 0 ? void 0 : _c.containerItems) === null || _d === void 0 ? void 0 : _d.forEach((containerItem) => {\n                        var _a;\n                        (_a = containerItem === null || containerItem === void 0 ? void 0 : containerItem.slices) === null || _a === void 0 ? void 0 : _a.forEach((slice) => {\n                            slice === null || slice === void 0 ? void 0 : slice.setPropertiesValues(dataViewObjects, card.name);\n                        });\n                    });\n                });\n            });\n        }\n        return defaultSettings;\n    }\n    /**\n     * Build formatting model by parsing formatting settings model object\n     *\n     * @returns powerbi visual formatting model\n     */\n    buildFormattingModel(formattingSettingsModel) {\n        const formattingModel = {\n            cards: []\n        };\n        formattingSettingsModel.cards\n            .filter(({ visible = true }) => visible)\n            .forEach((card) => {\n            var _a;\n            const formattingCard = {\n                displayName: (this.localizationManager && card.displayNameKey) ? this.localizationManager.getDisplayName(card.displayNameKey) : card.displayName,\n                description: (this.localizationManager && card.descriptionKey) ? this.localizationManager.getDisplayName(card.descriptionKey) : card.description,\n                groups: [],\n                uid: card.name + \"-card\",\n                analyticsPane: card.analyticsPane,\n            };\n            const objectName = card.name;\n            if (card.topLevelSlice) {\n                const topLevelToggleSlice = card.topLevelSlice.getFormattingSlice(objectName, this.localizationManager);\n                topLevelToggleSlice.suppressDisplayName = true;\n                formattingCard.topLevelToggle = topLevelToggleSlice;\n            }\n            (_a = card.onPreProcess) === null || _a === void 0 ? void 0 : _a.call(card);\n            const isSimpleCard = card instanceof SimpleCard;\n            const cardGroupInstances = (isSimpleCard ?\n                [card].filter(({ visible = true }) => visible) :\n                card.groups.filter(({ visible = true }) => visible));\n            cardGroupInstances\n                .forEach((cardGroupInstance) => {\n                const groupUid = cardGroupInstance.name + \"-group\";\n                // Build formatting group for each group\n                const formattingGroup = {\n                    displayName: isSimpleCard ? undefined : (this.localizationManager && cardGroupInstance.displayNameKey)\n                        ? this.localizationManager.getDisplayName(cardGroupInstance.displayNameKey) : cardGroupInstance.displayName,\n                    description: isSimpleCard ? undefined : (this.localizationManager && cardGroupInstance.descriptionKey)\n                        ? this.localizationManager.getDisplayName(cardGroupInstance.descriptionKey) : cardGroupInstance.description,\n                    slices: [],\n                    uid: groupUid,\n                    collapsible: cardGroupInstance.collapsible,\n                    delaySaveSlices: cardGroupInstance.delaySaveSlices,\n                    disabled: cardGroupInstance.disabled,\n                    disabledReason: cardGroupInstance.disabledReason,\n                };\n                formattingCard.groups.push(formattingGroup);\n                // In case formatting model adds data points or top categories (Like when you modify specific visual category color).\n                // these categories use same object name and property name from capabilities and the generated uid will be the same for these formatting categories properties\n                // Solution => Save slice names to modify each slice uid to be unique by adding counter value to the new slice uid\n                const sliceNames = {};\n                // Build formatting container slice for each property\n                if (cardGroupInstance.container) {\n                    const container = cardGroupInstance.container;\n                    const containerUid = groupUid + \"-container\";\n                    const formattingContainer = {\n                        displayName: (this.localizationManager && container.displayNameKey)\n                            ? this.localizationManager.getDisplayName(container.displayNameKey) : container.displayName,\n                        description: (this.localizationManager && container.descriptionKey)\n                            ? this.localizationManager.getDisplayName(container.descriptionKey) : container.description,\n                        containerItems: [],\n                        uid: containerUid\n                    };\n                    container.containerItems.forEach((containerItem) => {\n                        // Build formatting container item object\n                        const containerIemName = containerItem.displayNameKey ? containerItem.displayNameKey : containerItem.displayName;\n                        const containerItemUid = containerUid + containerIemName;\n                        const formattingContainerItem = {\n                            displayName: (this.localizationManager && containerItem.displayNameKey)\n                                ? this.localizationManager.getDisplayName(containerItem.displayNameKey) : containerItem.displayName,\n                            slices: [],\n                            uid: containerItemUid\n                        };\n                        // Build formatting slices and add them to current formatting container item\n                        this.buildFormattingSlices({ slices: containerItem.slices, objectName, sliceNames, formattingSlices: formattingContainerItem.slices });\n                        formattingContainer.containerItems.push(formattingContainerItem);\n                    });\n                    formattingGroup.container = formattingContainer;\n                }\n                if (cardGroupInstance.slices) {\n                    if (cardGroupInstance.topLevelSlice) {\n                        const topLevelToggleSlice = cardGroupInstance.topLevelSlice.getFormattingSlice(objectName, this.localizationManager);\n                        topLevelToggleSlice.suppressDisplayName = true;\n                        (formattingGroup.displayName == undefined ? formattingCard : formattingGroup).topLevelToggle = topLevelToggleSlice;\n                    }\n                    // Build formatting slice for each property\n                    this.buildFormattingSlices({ slices: cardGroupInstance.slices, objectName, sliceNames, formattingSlices: formattingGroup.slices });\n                }\n            });\n            formattingCard.revertToDefaultDescriptors = this.getRevertToDefaultDescriptor(card);\n            formattingModel.cards.push(formattingCard);\n        });\n        return formattingModel;\n    }\n    buildFormattingSlices({ slices, objectName, sliceNames, formattingSlices }) {\n        // Filter slices based on their visibility\n        slices === null || slices === void 0 ? void 0 : slices.filter(({ visible = true }) => visible).forEach((slice) => {\n            const formattingSlice = slice === null || slice === void 0 ? void 0 : slice.getFormattingSlice(objectName, this.localizationManager);\n            if (formattingSlice) {\n                // Modify formatting slice uid if needed\n                if (sliceNames[slice.name] === undefined) {\n                    sliceNames[slice.name] = 0;\n                }\n                else {\n                    sliceNames[slice.name]++;\n                    formattingSlice.uid = `${formattingSlice.uid}-${sliceNames[slice.name]}`;\n                }\n                formattingSlices.push(formattingSlice);\n            }\n        });\n    }\n    getRevertToDefaultDescriptor(card) {\n        var _a;\n        // Proceeded slice names are saved to prevent duplicated default descriptors in case of using \n        // formatting categories & selectors, since they have the same descriptor objectName and propertyName\n        const sliceNames = {};\n        const revertToDefaultDescriptors = [];\n        let cardSlicesDefaultDescriptors;\n        let cardContainerSlicesDefaultDescriptors = [];\n        // eslint-disable-next-line\n        if (card instanceof CompositeCard && card.topLevelSlice)\n            revertToDefaultDescriptors.push(...(_a = card.topLevelSlice) === null || _a === void 0 ? void 0 : _a.getRevertToDefaultDescriptor(card.name));\n        const cardGroupInstances = (card instanceof SimpleCard ?\n            [card].filter(({ visible = true }) => visible) :\n            card.groups.filter(({ visible = true }) => visible));\n        cardGroupInstances.forEach((cardGroupInstance) => {\n            var _a, _b;\n            cardSlicesDefaultDescriptors = this.getSlicesRevertToDefaultDescriptor(card.name, cardGroupInstance.slices, sliceNames, cardGroupInstance.topLevelSlice);\n            (_b = (_a = cardGroupInstance.container) === null || _a === void 0 ? void 0 : _a.containerItems) === null || _b === void 0 ? void 0 : _b.forEach((containerItem) => {\n                cardContainerSlicesDefaultDescriptors = cardContainerSlicesDefaultDescriptors.concat(this.getSlicesRevertToDefaultDescriptor(card.name, containerItem.slices, sliceNames));\n            });\n            revertToDefaultDescriptors.push(...cardSlicesDefaultDescriptors.concat(cardContainerSlicesDefaultDescriptors));\n        });\n        return revertToDefaultDescriptors;\n    }\n    getSlicesRevertToDefaultDescriptor(cardName, slices, sliceNames, topLevelSlice) {\n        let revertToDefaultDescriptors = [];\n        if (topLevelSlice) {\n            sliceNames[topLevelSlice.name] = true;\n            revertToDefaultDescriptors = revertToDefaultDescriptors.concat(topLevelSlice.getRevertToDefaultDescriptor(cardName));\n        }\n        slices === null || slices === void 0 ? void 0 : slices.forEach((slice) => {\n            if (slice && !sliceNames[slice.name]) {\n                sliceNames[slice.name] = true;\n                revertToDefaultDescriptors = revertToDefaultDescriptors.concat(slice.getRevertToDefaultDescriptor(cardName));\n            }\n        });\n        return revertToDefaultDescriptors;\n    }\n}\nexport default FormattingSettingsService;\n//# sourceMappingURL=FormattingSettingsService.js.map","import * as formattingSettings from \"./FormattingSettingsComponents\";\nimport FormattingSettingsService from \"./FormattingSettingsService\";\nexport { formattingSettings, FormattingSettingsService };\n//# sourceMappingURL=index.js.map","/**\n * Powerbi utils components classes for custom visual formatting pane objects\n *\n */\nimport * as FormattingSettingsParser from \"./utils/FormattingSettingsUtils\";\nclass NamedEntity {\n}\nexport class CardGroupEntity extends NamedEntity {\n}\nexport class Model {\n}\n/** CompositeCard is use to populate a card into the formatting pane with multiple groups */\nexport class CompositeCard extends NamedEntity {\n}\nexport class Group extends CardGroupEntity {\n    constructor(object) {\n        super();\n        Object.assign(this, object);\n    }\n}\n/** SimpleCard is use to populate a card into the formatting pane in a single group */\nexport class SimpleCard extends CardGroupEntity {\n}\nexport class SimpleSlice extends NamedEntity {\n    constructor(object) {\n        super();\n        Object.assign(this, object);\n    }\n    getFormattingSlice(objectName, localizationManager) {\n        const controlType = this.type;\n        const propertyName = this.name;\n        const sliceDisplayName = (localizationManager && this.displayNameKey) ? localizationManager.getDisplayName(this.displayNameKey) : this.displayName;\n        const sliceDescription = (localizationManager && this.descriptionKey) ? localizationManager.getDisplayName(this.descriptionKey) : this.description;\n        const componentDisplayName = {\n            displayName: sliceDisplayName,\n            description: sliceDescription,\n            uid: objectName + '-' + propertyName,\n        };\n        return Object.assign(Object.assign({}, componentDisplayName), { control: {\n                type: controlType,\n                properties: this.getFormattingComponent(objectName, localizationManager)\n            } });\n    }\n    // eslint-disable-next-line\n    getFormattingComponent(objectName, localizationManager) {\n        return {\n            descriptor: FormattingSettingsParser.getDescriptor(objectName, this),\n            value: this.value,\n        };\n    }\n    getRevertToDefaultDescriptor(objectName) {\n        return [{\n                objectName: objectName,\n                propertyName: this.name\n            }];\n    }\n    setPropertiesValues(dataViewObjects, objectName) {\n        var _a;\n        const newValue = (_a = dataViewObjects === null || dataViewObjects === void 0 ? void 0 : dataViewObjects[objectName]) === null || _a === void 0 ? void 0 : _a[this.name];\n        this.value = FormattingSettingsParser.getPropertyValue(this, newValue, this.value);\n    }\n}\nexport class AlignmentGroup extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"AlignmentGroup\" /* visuals.FormattingComponent.AlignmentGroup */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { mode: this.mode, supportsNoSelection: this.supportsNoSelection });\n    }\n}\nexport class ToggleSwitch extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ToggleSwitch\" /* visuals.FormattingComponent.ToggleSwitch */;\n    }\n}\nexport class ColorPicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ColorPicker\" /* visuals.FormattingComponent.ColorPicker */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { defaultColor: this.defaultColor, isNoFillItemSupported: this.isNoFillItemSupported });\n    }\n}\nexport class NumUpDown extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"NumUpDown\" /* visuals.FormattingComponent.NumUpDown */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { options: this.options });\n    }\n}\nexport class Slider extends NumUpDown {\n    constructor() {\n        super(...arguments);\n        this.type = \"Slider\" /* visuals.FormattingComponent.Slider */;\n    }\n}\nexport class DatePicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"DatePicker\" /* visuals.FormattingComponent.DatePicker */;\n    }\n    getFormattingComponent(objectName, localizationManager) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { placeholder: (localizationManager && this.placeholderKey) ? localizationManager.getDisplayName(this.placeholderKey) : this.placeholder, validators: this.validators });\n    }\n}\nexport class ItemDropdown extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"Dropdown\" /* visuals.FormattingComponent.Dropdown */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { items: this.items });\n    }\n}\nexport class AutoDropdown extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"Dropdown\" /* visuals.FormattingComponent.Dropdown */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { mergeValues: this.mergeValues, filterValues: this.filterValues });\n    }\n}\nexport class DurationPicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"DurationPicker\" /* visuals.FormattingComponent.DurationPicker */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { validators: this.validators });\n    }\n}\nexport class ErrorRangeControl extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ErrorRangeControl\" /* visuals.FormattingComponent.ErrorRangeControl */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { validators: this.validators });\n    }\n}\nexport class FieldPicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"FieldPicker\" /* visuals.FormattingComponent.FieldPicker */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { validators: this.validators, allowMultipleValues: this.allowMultipleValues });\n    }\n}\nexport class ItemFlagsSelection extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"FlagsSelection\" /* visuals.FormattingComponent.FlagsSelection */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { items: this.items });\n    }\n}\nexport class AutoFlagsSelection extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"FlagsSelection\" /* visuals.FormattingComponent.FlagsSelection */;\n    }\n}\nexport class TextInput extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"TextInput\" /* visuals.FormattingComponent.TextInput */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { placeholder: this.placeholder });\n    }\n}\nexport class TextArea extends TextInput {\n    constructor() {\n        super(...arguments);\n        this.type = \"TextArea\" /* visuals.FormattingComponent.TextArea */;\n    }\n}\nexport class FontPicker extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"FontPicker\" /* visuals.FormattingComponent.FontPicker */;\n    }\n}\nexport class GradientBar extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"GradientBar\" /* visuals.FormattingComponent.GradientBar */;\n    }\n}\nexport class ImageUpload extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"ImageUpload\" /* visuals.FormattingComponent.ImageUpload */;\n    }\n}\nexport class ListEditor extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"ListEditor\" /* visuals.FormattingComponent.ListEditor */;\n    }\n}\nexport class ReadOnlyText extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"ReadOnlyText\" /* visuals.FormattingComponent.ReadOnlyText */;\n    }\n}\nexport class ShapeMapSelector extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ShapeMapSelector\" /* visuals.FormattingComponent.ShapeMapSelector */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { isAzMapReferenceSelector: this.isAzMapReferenceSelector });\n    }\n}\nexport class CompositeSlice extends NamedEntity {\n    constructor(object) {\n        super();\n        Object.assign(this, object);\n    }\n    getFormattingSlice(objectName, localizationManager) {\n        const controlType = this.type;\n        const propertyName = this.name;\n        const componentDisplayName = {\n            displayName: (localizationManager && this.displayNameKey) ? localizationManager.getDisplayName(this.displayNameKey) : this.displayName,\n            description: (localizationManager && this.descriptionKey) ? localizationManager.getDisplayName(this.descriptionKey) : this.description,\n            uid: objectName + '-' + propertyName,\n        };\n        return Object.assign(Object.assign({}, componentDisplayName), { control: {\n                type: controlType,\n                properties: this.getFormattingComponent(objectName)\n            } });\n    }\n}\nexport class FontControl extends CompositeSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"FontControl\" /* visuals.FormattingComponent.FontControl */;\n    }\n    getFormattingComponent(objectName) {\n        var _a, _b, _c;\n        return {\n            fontFamily: this.fontFamily.getFormattingComponent(objectName),\n            fontSize: this.fontSize.getFormattingComponent(objectName),\n            bold: (_a = this.bold) === null || _a === void 0 ? void 0 : _a.getFormattingComponent(objectName),\n            italic: (_b = this.italic) === null || _b === void 0 ? void 0 : _b.getFormattingComponent(objectName),\n            underline: (_c = this.underline) === null || _c === void 0 ? void 0 : _c.getFormattingComponent(objectName)\n        };\n    }\n    getRevertToDefaultDescriptor(objectName) {\n        return this.fontFamily.getRevertToDefaultDescriptor(objectName)\n            .concat(this.fontSize.getRevertToDefaultDescriptor(objectName))\n            .concat(this.bold ? this.bold.getRevertToDefaultDescriptor(objectName) : [])\n            .concat(this.italic ? this.italic.getRevertToDefaultDescriptor(objectName) : [])\n            .concat(this.underline ? this.underline.getRevertToDefaultDescriptor(objectName) : []);\n    }\n    setPropertiesValues(dataViewObjects, objectName) {\n        var _a, _b, _c;\n        this.fontFamily.setPropertiesValues(dataViewObjects, objectName);\n        this.fontSize.setPropertiesValues(dataViewObjects, objectName);\n        (_a = this.bold) === null || _a === void 0 ? void 0 : _a.setPropertiesValues(dataViewObjects, objectName);\n        (_b = this.italic) === null || _b === void 0 ? void 0 : _b.setPropertiesValues(dataViewObjects, objectName);\n        (_c = this.underline) === null || _c === void 0 ? void 0 : _c.setPropertiesValues(dataViewObjects, objectName);\n    }\n}\nexport class MarginPadding extends CompositeSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"MarginPadding\" /* visuals.FormattingComponent.MarginPadding */;\n    }\n    getFormattingComponent(objectName) {\n        return {\n            left: this.left.getFormattingComponent(objectName),\n            right: this.right.getFormattingComponent(objectName),\n            top: this.top.getFormattingComponent(objectName),\n            bottom: this.bottom.getFormattingComponent(objectName)\n        };\n    }\n    getRevertToDefaultDescriptor(objectName) {\n        return this.left.getRevertToDefaultDescriptor(objectName)\n            .concat(this.right.getRevertToDefaultDescriptor(objectName))\n            .concat(this.top.getRevertToDefaultDescriptor(objectName))\n            .concat(this.bottom.getRevertToDefaultDescriptor(objectName));\n    }\n    setPropertiesValues(dataViewObjects, objectName) {\n        this.left.setPropertiesValues(dataViewObjects, objectName);\n        this.right.setPropertiesValues(dataViewObjects, objectName);\n        this.top.setPropertiesValues(dataViewObjects, objectName);\n        this.bottom.setPropertiesValues(dataViewObjects, objectName);\n    }\n}\nexport class Container extends NamedEntity {\n    constructor(object) {\n        super();\n        Object.assign(this, object);\n    }\n}\nexport class ContainerItem extends NamedEntity {\n}\n//# sourceMappingURL=FormattingSettingsComponents.js.map","import { formattingSettings } from \"powerbi-visuals-utils-formattingmodel\";\nimport FormattingSettingsCard = formattingSettings.SimpleCard;\nimport FormattingSettingsModel = formattingSettings.Model;\nimport FormattingSettingsSlice = formattingSettings.Slice;\n\nclass BehaviorSettings extends FormattingSettingsCard {\n    autoSlide = new formattingSettings.ToggleSwitch({\n        name: \"autoSlide\",\n        displayName: \"Deslizamiento automático\",\n        value: true\n    });\n\n    hoverToZoom = new formattingSettings.ToggleSwitch({\n        name: \"hoverToZoom\",\n        displayName: \"Zoom al pasar el mouse\",\n        value: true\n    });\n\n    randomize = new formattingSettings.ToggleSwitch({\n        name: \"randomize\",\n        displayName: \"Orden aleatorio al cargar\",\n        value: false\n    });\n\n    imageCount = new formattingSettings.NumUpDown({\n        name: \"imageCount\",\n        displayName: \"Cantidad de imágenes visibles\",\n        value: 1\n    });\n\n    interval = new formattingSettings.NumUpDown({\n        name: \"interval\",\n        displayName: \"Intervalo auto-slide (s)\",\n        value: 3,\n        visible: true\n    });\n\n    spaceBetween = new formattingSettings.NumUpDown({\n        name: \"spaceBetween\",\n        displayName: \"Espacio entre imágenes (px)\",\n        value: 8,\n        visible: false\n    });\n\n    name: string = \"behavior\";\n    displayName: string = \"Comportamiento del Carrusel\";\n    slices: FormattingSettingsSlice[] = [\n        this.autoSlide,\n        this.hoverToZoom,\n        this.randomize,\n        this.interval,\n        this.imageCount,\n        this.spaceBetween\n    ];\n}\n\nexport class VisualSettings extends FormattingSettingsModel {\n    behavior: BehaviorSettings = new BehaviorSettings();\n    cards: FormattingSettingsCard[] = [this.behavior];\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Visual } from \"../../src/visual\";\nimport powerbiVisualsApi from \"powerbi-visuals-api\";\nimport IVisualPlugin = powerbiVisualsApi.visuals.plugins.IVisualPlugin;\nimport VisualConstructorOptions = powerbiVisualsApi.extensibility.visual.VisualConstructorOptions;\nimport DialogConstructorOptions = powerbiVisualsApi.extensibility.visual.DialogConstructorOptions;\nvar powerbiKey: any = \"powerbi\";\nvar powerbi: any = window[powerbiKey];\nvar imageCarousel841D08754064411FB94209D64C84C32B_DEBUG: IVisualPlugin = {\n    name: 'imageCarousel841D08754064411FB94209D64C84C32B_DEBUG',\n    displayName: 'ImageCarousel',\n    class: 'Visual',\n    apiVersion: '5.3.0',\n    create: (options?: VisualConstructorOptions) => {\n        if (Visual) {\n            return new Visual(options);\n        }\n        throw 'Visual instance not found';\n    },\n    createModalDialog: (dialogId: string, options: DialogConstructorOptions, initialState: object) => {\n        const dialogRegistry = (<any>globalThis).dialogRegistry;\n        if (dialogId in dialogRegistry) {\n            new dialogRegistry[dialogId](options, initialState);\n        }\n    },\n    custom: true\n};\nif (typeof powerbi !== \"undefined\") {\n    powerbi.visuals = powerbi.visuals || {};\n    powerbi.visuals.plugins = powerbi.visuals.plugins || {};\n    powerbi.visuals.plugins[\"imageCarousel841D08754064411FB94209D64C84C32B_DEBUG\"] = imageCarousel841D08754064411FB94209D64C84C32B_DEBUG;\n}\nexport default imageCarousel841D08754064411FB94209D64C84C32B_DEBUG;"],"names":[],"sourceRoot":""}